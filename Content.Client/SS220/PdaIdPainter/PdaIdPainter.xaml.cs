using System.Numerics;
using Content.Shared.Access.Components;
using Content.Shared.PDA;
using Content.Shared.Prototypes;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.PdaIdPainter;

[GenerateTypedNameReferences]
public sealed partial class PdaIdPainter : DefaultWindow
{
    public Action<string>? OnPdaPicked;
    public Action<string>? OnIdPicked;

    public List<EntityPrototype> PdaAndIds = [];

    public PdaIdPainter()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        SearchPdaBar.OnTextChanged += OnSearchBarTextChanged;
        SearchIdBar.OnTextChanged += OnSearchBarTextChanged;
    }

    private void OnSearchBarTextChanged(LineEdit.LineEditEventArgs args)
    {
        PopulateList(null, null);
    }

    private void PopulateList(EntProtoId? pdaDefaultProto, EntProtoId? idDefaultProto)
    {
        PdaList.RemoveAllChildren();
        IdList.RemoveAllChildren();

        var searchPdaTerm = SearchPdaBar.Text.ToLower();
        var searchIdTerm = SearchIdBar.Text.ToLower();

        var groupForId = new ButtonGroup();
        var groupForPda = new ButtonGroup();
        foreach (var entry in PdaAndIds)
        {
            var matchPda = entry.HasComponent<PdaComponent>() &&
                            (string.IsNullOrEmpty(searchPdaTerm) || entry.Name.Contains(searchPdaTerm, StringComparison.CurrentCultureIgnoreCase));

            var matchIdCard = entry.HasComponent<IdCardComponent>() &&
                               (string.IsNullOrEmpty(searchIdTerm) || entry.Name.Contains(searchIdTerm, StringComparison.CurrentCultureIgnoreCase));

            if (matchPda)
            {
                var button = new Button
                {
                    HorizontalExpand = true,
                    Group = groupForPda,
                    StyleClasses = {"OpenBoth"},
                    ToggleMode = true,
                };

                if (entry.ID == pdaDefaultProto?.Id)
                {
                    button.Pressed = true;
                }

                var hbox = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    SeparationOverride = 10,
                    HorizontalExpand = true,
                };

                var iconTexture = new EntityPrototypeView
                {
                    MinSize = new Vector2(32, 32),
                    MaxSize = new Vector2(32, 32),
                };
                iconTexture.SetPrototype(entry);

                var labelForTexture = new Label
                {
                    Text = entry.Name,
                    HorizontalExpand = true,
                };

                hbox.AddChild(iconTexture);
                hbox.AddChild(labelForTexture);
                button.AddChild(hbox);

                button.OnPressed += _ =>
                {
                    OnPdaPicked?.Invoke(entry.ID);
                    button.Pressed = true;
                };

                PdaList.AddChild(button);
            }

            if (matchIdCard)
            {
                var button = new Button
                {
                    HorizontalExpand = true,
                    Group = groupForId,
                    StyleClasses = {"OpenBoth"},
                    ToggleMode = true,
                };

                if (entry.ID == idDefaultProto?.Id)
                {
                    button.Pressed = true;
                }

                var hbox = new BoxContainer
                {
                    Orientation = BoxContainer.LayoutOrientation.Horizontal,
                    SeparationOverride = 10,
                    HorizontalExpand = true,
                };

                var iconTexture = new EntityPrototypeView
                {
                    MinSize = new Vector2(32, 32),
                    MaxSize = new Vector2(32, 32),
                };
                iconTexture.SetPrototype(entry);

                var labelForTexture = new Label
                {
                    Text = entry.Name,
                    HorizontalExpand = true,
                };

                hbox.AddChild(iconTexture);
                hbox.AddChild(labelForTexture);
                button.AddChild(hbox);

                button.OnPressed += _ =>
                {
                    OnIdPicked?.Invoke(entry.ID);
                    button.Pressed = true;
                };

                IdList.AddChild(button);
            }
        }
    }


    public void Populate(List<EntityPrototype> entries, EntProtoId? pdaDefaultProto, EntProtoId? idDefaultProto)
    {
        PdaAndIds = entries;
        PopulateList(pdaDefaultProto, idDefaultProto);
    }
}

