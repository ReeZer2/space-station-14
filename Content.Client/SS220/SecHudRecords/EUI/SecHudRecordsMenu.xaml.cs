using System.Linq;
using System.Numerics;
using Content.Client.SS220.UserInterface;
using Content.Client.UserInterface.Controls;
using Content.Shared.SS220.CriminalRecords;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Player;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client.SS220.SecHudRecords.EUI;

[GenerateTypedNameReferences]
public sealed partial class SecHudRecordsMenu : FancyWindow
{
    [Dependency] private readonly IPlayerManager _player = default!;
    [Dependency] private readonly IEntityManager _entMan = default!;
    [Dependency] private readonly IPrototypeManager _proto = default!;

    private readonly SpriteSystem _sprite;

    private CriminalStatusPrototype? _chosenStatus;
    private string _reasonText = string.Empty;

    public NetEntity? TargetEntityId { get; set; }
    public List<(ProtoId<CriminalStatusPrototype>?, string)> FullCatalog = new();

    public SecHudRecordsMenu()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _sprite = _entMan.System<SpriteSystem>();

        Reason.OnTextChanged += args =>
        {
            _reasonText = args.Text;
        };

        ConfirmableButton.OnPressed += _ =>
        {
            var player = _entMan.GetNetEntity(_player.LocalEntity);
            if (_chosenStatus == null || TargetEntityId == null || player == null)
                return;

            _entMan.RaisePredictiveEvent(new UpdateCriminalRecordStatusEvent(TargetEntityId.Value, player.Value, _reasonText, _chosenStatus));
            Close();
        };
    }

    public void PopulatePrototypes()
    {
        CriminalStatuses.DisposeAllChildren();
        RecordHistory.DisposeAllChildren();

        var protos = _proto.EnumeratePrototypes<CriminalStatusPrototype>().OrderBy(p => p.Name).ToList();

        if (TargetEntityId == null)
        {
            SpriteTarget.Visible = false;
        }
        else
        {
            SpriteTarget.SetEntity(TargetEntityId.Value);
            SpriteTarget.Scale = new Vector2(3f);
        }

        if (FullCatalog.Count == 0)
            RecordHistory.AddChild(new Label {Text = Loc.GetString("sec-hud-records-no-entries")});
        else
        {
            foreach (var record in FullCatalog)
            {
                if (!_proto.TryIndex(record.Item1, out var protoHistoryRecord))
                    continue;

                var label = new RichTextLabel
                {
                    MaxWidth = 400,
                    Text = $"{protoHistoryRecord.Name}: {record.Item2}",
                    HorizontalAlignment = HAlignment.Left,
                    Modulate = protoHistoryRecord.Color,
                };

                RecordHistory.AddChild(label);
            }
        }

        var group = new ButtonGroup();

        foreach (var proto in protos)
        {
            var button = new ShapeButton
            {
                SetWidth = 280f,
                Text = proto.Name,
                Group = group,
            };

            button.Label.Modulate = proto.Color;

            if (_proto.TryIndex(proto.StatusIcon, out var statusIcon))
            {
                var textureRect = new TextureRect
                {
                    Texture = _sprite.Frame0(statusIcon.Icon),
                    ModulateSelfOverride = Color.White,
                    HorizontalAlignment = HAlignment.Left,
                    VerticalAlignment = VAlignment.Center,
                    TextureScale = new Vector2(2f),
                };

                button.AddChild(textureRect);
            }

            button.OnPressed += _ =>
            {
                _chosenStatus = proto;

                foreach (var groupButton in button.Group.Buttons)
                {
                    if (groupButton is not ShapeButton shapeButton)
                        continue;

                    if (groupButton == button)
                    {
                        button.BorderColor = Color.Green;
                        continue;
                    }

                    shapeButton.BorderColor = Color.Black;
                }
            };

            CriminalStatuses.AddChild(button);
        }
    }
}

